// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeacherControl.DataEFCore;

namespace TeacherControl.DataEFCore.Migrations
{
    [DbContext(typeof(TCContext))]
    partial class TCContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TeacherControl.Domain.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("HashIndex")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<double>("Points");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("StatusId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasDefaultValue("");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnUpdate();

                    b.HasKey("Id");

                    b.HasIndex("HashIndex")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "Lorem Ipsum",
                            CreatedBy = "Test",
                            CreatedDate = new DateTime(2019, 3, 1, 5, 20, 1, 973, DateTimeKind.Utc).AddTicks(4848),
                            EndDate = new DateTime(2019, 3, 3, 5, 20, 1, 973, DateTimeKind.Utc).AddTicks(2212),
                            HashIndex = "817a9f64da7e",
                            Points = 1234.0,
                            StartDate = new DateTime(2019, 3, 1, 5, 20, 1, 973, DateTimeKind.Utc).AddTicks(1655),
                            StatusId = 1,
                            Title = "lorem ipsum",
                            UpdatedBy = "Test",
                            UpdatedDate = new DateTime(2019, 3, 1, 5, 20, 1, 973, DateTimeKind.Utc).AddTicks(4848)
                        });
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.AssignmentCounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId");

                    b.Property<int>("UpvotesCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("ViewsCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId")
                        .IsUnique();

                    b.ToTable("AssignmentCounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentId = 1,
                            UpvotesCount = 123,
                            ViewsCount = 321
                        });
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.AssignmentGroup", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<int>("AssignmentId");

                    b.HasKey("GroupId", "AssignmentId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("AssignmentGroups");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.AssignmentStudentPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignmentId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<float>("Points");

                    b.Property<int?>("StudentId");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("AssignmentStudentPoints");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.AssignmentTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("AssignmentTags");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Credits");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("HashIndex");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int?>("ProfessorId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int?>("StatusId");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasDefaultValue("");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("StatusId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.CourseTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasDefaultValue("");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseTags");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.CourseUserCredit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Credits");

                    b.Property<int?>("StudentId");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasDefaultValue("");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseUserCredits");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("StatusId");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasDefaultValue("");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnUpdate();

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Test",
                            CreatedDate = new DateTime(2019, 3, 1, 5, 20, 1, 971, DateTimeKind.Utc).AddTicks(7848),
                            Name = "Test",
                            StatusId = 1,
                            UpdatedBy = "Test",
                            UpdatedDate = new DateTime(2019, 3, 1, 5, 20, 1, 971, DateTimeKind.Utc).AddTicks(8345)
                        });
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.GroupPrivilege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("GroupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasDefaultValue("");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnUpdate();

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupPrivilege");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRequired");

                    b.Property<double>("Points");

                    b.Property<int>("QuestionnaireId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("QuestionnaireId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired();

                    b.Property<bool>("IsCorrect");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.QuestionAnswerMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LeftQuestionAnswerId");

                    b.Property<int?>("QuestionId");

                    b.Property<int?>("RightQuestionAnswerId");

                    b.HasKey("Id");

                    b.HasIndex("LeftQuestionAnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RightQuestionAnswerId");

                    b.ToTable("QuestionAnswerMatches");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.QuestionAnswerUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("QuestionAnswerId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionAnswerId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionAnswerUsers");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.QuestionAnswerUserMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LeftQuestionAnswerId");

                    b.Property<int?>("RightQuestionAnswerId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LeftQuestionAnswerId");

                    b.HasIndex("RightQuestionAnswerId");

                    b.HasIndex("UserId");

                    b.ToTable("QuestionAnswerUserMatches");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.Questionnaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignmentId");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(600);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("PointsToPass");

                    b.Property<int?>("StatusId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasDefaultValue("");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("StatusId");

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Active",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "InActive",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pending",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Deprecated",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bbocked",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthToken")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasDefaultValue("");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnUpdate();

                    b.Property<int?>("UserInfoId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("AuthToken")
                        .IsUnique();

                    b.HasIndex("UserInfoId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthToken = "30303a77c35c4516b3beee1464eea4fb",
                            CreatedBy = "Test",
                            CreatedDate = new DateTime(2019, 3, 1, 5, 20, 1, 972, DateTimeKind.Utc).AddTicks(5773),
                            UpdatedBy = "Test",
                            UpdatedDate = new DateTime(2019, 3, 1, 5, 20, 1, 972, DateTimeKind.Utc).AddTicks(5773)
                        });
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.UserGroup", b =>
                {
                    b.Property<int>("GroupId");

                    b.Property<int>("UserId");

                    b.HasKey("GroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.Assignment", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.AssignmentCounts", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.Assignment", "Assignment")
                        .WithOne("Counts")
                        .HasForeignKey("TeacherControl.Domain.Models.AssignmentCounts", "AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.AssignmentGroup", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.Assignment", "Assignment")
                        .WithMany("Groups")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeacherControl.Domain.Models.Group", "Group")
                        .WithMany("Assignments")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.AssignmentStudentPoint", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId");

                    b.HasOne("TeacherControl.Domain.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.AssignmentTag", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.Assignment", "Assignment")
                        .WithMany("Tags")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.Course", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.User", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId");

                    b.HasOne("TeacherControl.Domain.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.CourseTag", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.Course", "Course")
                        .WithMany("Tags")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.CourseUserCredit", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("TeacherControl.Domain.Models.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.GroupPrivilege", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.Group", "Group")
                        .WithMany("Privileges")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.Question", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.Questionnaire", "Questionnaire")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionnaireId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.QuestionAnswer", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.QuestionAnswerMatch", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.QuestionAnswer", "LeftQuestionAnswer")
                        .WithMany()
                        .HasForeignKey("LeftQuestionAnswerId");

                    b.HasOne("TeacherControl.Domain.Models.Question")
                        .WithMany("AnswerMatch")
                        .HasForeignKey("QuestionId");

                    b.HasOne("TeacherControl.Domain.Models.QuestionAnswer", "RightQuestionAnswer")
                        .WithMany()
                        .HasForeignKey("RightQuestionAnswerId");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.QuestionAnswerUser", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.QuestionAnswer", "QuestionAnswer")
                        .WithMany()
                        .HasForeignKey("QuestionAnswerId");

                    b.HasOne("TeacherControl.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.QuestionAnswerUserMatch", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.QuestionAnswer", "LeftQuestionAnswer")
                        .WithMany()
                        .HasForeignKey("LeftQuestionAnswerId");

                    b.HasOne("TeacherControl.Domain.Models.QuestionAnswer", "RightQuestionAnswer")
                        .WithMany()
                        .HasForeignKey("RightQuestionAnswerId");

                    b.HasOne("TeacherControl.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.Questionnaire", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.Assignment", "Assignment")
                        .WithMany("Questionnaires")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeacherControl.Domain.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.User", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId");
                });

            modelBuilder.Entity("TeacherControl.Domain.Models.UserGroup", b =>
                {
                    b.HasOne("TeacherControl.Domain.Models.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TeacherControl.Domain.Models.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
